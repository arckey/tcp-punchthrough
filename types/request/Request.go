// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package request

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Request struct {
	_tab flatbuffers.Table
}

func GetRootAsRequest(buf []byte, offset flatbuffers.UOffsetT) *Request {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Request{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Request) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Request) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Request) Type() RequestType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return RequestType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Request) MutateType(n RequestType) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func (rcv *Request) RequestType() AllRequests {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return AllRequests(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Request) MutateRequestType(n AllRequests) bool {
	return rcv._tab.MutateByteSlot(6, byte(n))
}

func (rcv *Request) Request(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func RequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func RequestAddType(builder *flatbuffers.Builder, type_ RequestType) {
	builder.PrependInt8Slot(0, int8(type_), 0)
}
func RequestAddRequestType(builder *flatbuffers.Builder, requestType AllRequests) {
	builder.PrependByteSlot(1, byte(requestType), 0)
}
func RequestAddRequest(builder *flatbuffers.Builder, request flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(request), 0)
}
func RequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
